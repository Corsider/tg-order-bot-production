package main

import (
	"database/sql"
	"fmt"
	_ "github.com/lib/pq"
	"log"
	"os"
	"strconv"
	"strings"
)

/*

	When user starts the bot, it automatically adds user's data to database.

*/

// DB Connection...
func ConnectDB() *sql.DB {
	connStr := fmt.Sprintf("host=%s port=5432 user=postgres password=%s dbname=tgbotdb sslmode=disable", os.Getenv("DBHOST"), os.Getenv("POSTGRES_PASS"))
	db, err := sql.Open("postgres", connStr)
	if err != nil {
		log.Fatal(err)
	}
	return db
}

var DB *sql.DB

// KEYBOARDS...
var keyboardMain = CreateInlineKeyboardMarkup(
	CreateInlineKeyboardRow(
		CreateInlineKeyboardButton("–°–æ–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑", "dat1"),
		CreateInlineKeyboardButton("–ú–æ–∏ –∑–∞–∫–∞–∑—ã", "dat2"),
	),
	CreateInlineKeyboardRow(
		CreateInlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å", "dat3"),
		CreateInlineKeyboardButton("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", "dat4"),
	),
)

var keyboardOrder = CreateInlineKeyboardMarkup(
	CreateInlineKeyboardRow(
		CreateInlineKeyboardButton("–ü–∏—Ü—Ü–∞ –ø–µ–ø–µ—Ä–æ–Ω–∏", "p1"),
		CreateInlineKeyboardButton("–ü–∏—Ü—Ü–∞ 4 —Å—ã—Ä–∞", "p2"),
	),
	CreateInlineKeyboardRow(
		CreateInlineKeyboardButton("–î–æ–±—Ä—ã–π –ö–æ–ª–∞ 0.5–ª", "p3"),
		CreateInlineKeyboardButton("–ö–∏–Ω–¥–µ—Ä-–°—é—Ä–ø—Ä–∏–∑", "p4"),
	),
	CreateInlineKeyboardRow(
		CreateInlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å", "p5"),
	),
	CreateInlineKeyboardRow(
		CreateInlineKeyboardButton("–ù–∞–∑–∞–¥", "toMain"),
		CreateInlineKeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞", "cart"),
	),
)

var keyboardRate = CreateInlineKeyboardMarkup(
	CreateInlineKeyboardRow(
		CreateInlineKeyboardButton("üëç", "good"),
		CreateInlineKeyboardButton("üëé", "bad"),
	),
	CreateInlineKeyboardRow(
		CreateInlineKeyboardButton("–ù–∞–∑–∞–¥", "toMain"),
	),
)

var keyboardCart = CreateInlineKeyboardMarkup(
	CreateInlineKeyboardRow(
		CreateInlineKeyboardButton("–ù–∞–∑–∞–¥", "toMainOrder"),
		CreateInlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", "deleteItem"),
	),
	CreateInlineKeyboardRow(
		CreateInlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å", "p5"), //dat1
	),
)

var keyboardMyOrders = CreateInlineKeyboardMarkup(
	CreateInlineKeyboardRow(
		CreateInlineKeyboardButton("–ù–∞–∑–∞–¥", "toMain"),
		CreateInlineKeyboardButton("–ù–æ–≤—ã–π –∑–∞–∫–∞–∑", "dat1"),
	),
	CreateInlineKeyboardRow(
		CreateInlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤", "clearHist"),
	),
)

var keyboardAddress = CreateInlineKeyboardMarkup(
	CreateInlineKeyboardRow(
		CreateInlineKeyboardButton("–ù–∞–∑–∞–¥", "toMain"),
		CreateInlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å", "setAddress"),
	),
)

var keyboardDelete = CreateInlineKeyboardMarkup(
	CreateInlineKeyboardRow(
		CreateInlineKeyboardButton("–ü–∏—Ü—Ü–∞ –ø–µ–ø–µ—Ä–æ–Ω–∏", "dp1"),
		CreateInlineKeyboardButton("–ü–∏—Ü—Ü–∞ 4 —Å—ã—Ä–∞", "dp2"),
	),
	CreateInlineKeyboardRow(
		CreateInlineKeyboardButton("–î–æ–±—Ä—ã–π –ö–æ–ª–∞ 0.5–ª", "dp3"),
		CreateInlineKeyboardButton("–ö–∏–Ω–¥–µ—Ä-–°—é—Ä–ø—Ä–∏–∑", "dp4"),
	),
	CreateInlineKeyboardRow(
		CreateInlineKeyboardButton("–ù–∞–∑–∞–¥", "toMainOrder"),
	),
)

func main() {
	bot, err := CreateBot(os.Getenv("TG_BOT_TOKEN"))
	if err != nil {
		log.Fatal(err)
	}
	log.Println("SERVER STARTED")

	DB = ConnectDB()
	log.Println("DB CONNECTION ESTABLISHED")

	defer DB.Close()

	waitingInput := false
	FoodArray := []string{"–ü–∏—Ü—Ü–∞ –ü–µ–ø–µ—Ä–æ–Ω–∏", "–ü–∏—Ü—Ü–∞ 4 —Å—ã—Ä–∞", "–î–æ–±—Ä—ã–π –ö–æ–ª–∞ 0.5–ª", "–ö–∏–Ω–¥–µ—Ä-–°—é—Ä–ø—Ä–∏–∑"}

	updateParameters := UpdateParams{
		Limit:   0,
		Offset:  0,
		Timeout: 30,
	}

	updates := bot.UpdatesChannel(updateParameters)
	for update := range updates {
		if update.MyChatMember != nil { // simple defense from banning bot
			continue
		}
		if update.CallbackQuery != nil {
			switch update.CallbackQuery.Data {
			case "dat1":
				_, _ = bot.sendEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.Id, update.CallbackQuery.Message.MessageID, "–ò—Ç–∞–∫, –≤—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã –∑–∞–∫–∞–∂–µ—à—å:", &keyboardOrder)
			case "dat2":
				orderStr := GetUserOrderHistory(update.CallbackQuery.Message.Chat.Id)
				orders := strings.Split(orderStr, ";")
				if orders[0] == "" {
					_, _ = bot.sendEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.Id, update.CallbackQuery.Message.MessageID, "–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç!\n\n", &keyboardMyOrders)
					continue
				}
				out := ""
				for i, order := range orders {
					subout := strconv.Itoa(i+1) + "-–π –∑–∞–∫–∞–∑:\n"
					food := strings.Split(order, ",")
					foodmap := make(map[int]int)
					foodmap[0] = 0
					foodmap[1] = 0
					foodmap[2] = 0
					foodmap[3] = 0
					for k := 0; k <= 4; k++ {
						for _, v := range food {
							if First(strconv.Atoi(v)) == k {
								foodmap[k] += 1
							}
						}
					}
					count := 1
					for k := 0; k <= 4; k++ {
						if foodmap[k] != 0 {
							if foodmap[k] > 1 {
								subout += "\t" + strconv.Itoa(count) + ") " + FoodArray[k] + " x" + strconv.Itoa(foodmap[k]) + "\n"
							} else {
								subout += "\t" + strconv.Itoa(count) + ") " + FoodArray[k] + "\n"
							}
							count += 1
						}
					}
					out += subout + "\n"
				}
				_, _ = bot.sendEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.Id, update.CallbackQuery.Message.MessageID, "–¢–≤–æ–∏ –∑–∞–∫–∞–∑—ã:\n\n"+out, &keyboardMyOrders)
			case "cart":
				outstr := "–í–æ—Ç —á—Ç–æ —Å–µ–π—á–∞—Å –≤ —Ç–≤–æ–µ–π –∫–æ—Ä–∑–∏–Ω–µ:\n\n"
				items := GetUserCart(update.CallbackQuery.From.ID)
				if items == nil {
					_, _ = bot.sendEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.Id, update.CallbackQuery.Message.MessageID, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞! –í—ã–±–µ—Ä–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å:", &keyboardOrder)
				} else {
					str := ""
					foodmap := make(map[int]int)
					foodmap[0] = 0
					foodmap[1] = 0
					foodmap[2] = 0
					foodmap[3] = 0
					for i := 0; i <= 4; i++ {
						for _, v := range items {
							if v == i {
								foodmap[i] += 1
							}
						}
					}
					count := 0
					for i := 0; i <= 4; i++ {
						if foodmap[i] != 0 {
							str += strconv.Itoa(count+1) + ") " + FoodArray[i] + " - x" + strconv.Itoa(foodmap[i]) + "\n"
							count += 1
						}
					}
					_, _ = bot.sendEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.Id, update.CallbackQuery.Message.MessageID, outstr+str, &keyboardCart)
				}
			case "deleteItem":
				_, _ = bot.sendEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.Id, update.CallbackQuery.Message.MessageID, "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã?", &keyboardDelete)
			case "dp1":
				cart := GetUserCart(update.CallbackQuery.From.ID)
				if cart == nil {
					_, _ = bot.sendEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.Id, update.CallbackQuery.Message.MessageID, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", &keyboardOrder)
				} else {
					if CartContains(update.CallbackQuery.From.ID, 0) {
						RemoveFromUserCart(update.CallbackQuery.From.ID, 0)
						_, _ = bot.sendEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.Id, update.CallbackQuery.Message.MessageID, "–£–¥–∞–ª–µ–Ω–æ.", &keyboardOrder)
						continue
					}
					_, _ = bot.sendEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.Id, update.CallbackQuery.Message.MessageID, "–≠—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –±—ã–ª–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ!", &keyboardOrder)
				}
			case "dp2":
				cart := GetUserCart(update.CallbackQuery.From.ID)
				if cart == nil {
					_, _ = bot.sendEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.Id, update.CallbackQuery.Message.MessageID, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", &keyboardOrder)
				} else {
					if CartContains(update.CallbackQuery.From.ID, 1) {
						RemoveFromUserCart(update.CallbackQuery.From.ID, 1)
						_, _ = bot.sendEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.Id, update.CallbackQuery.Message.MessageID, "–£–¥–∞–ª–µ–Ω–æ.", &keyboardOrder)
						continue
					}
					_, _ = bot.sendEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.Id, update.CallbackQuery.Message.MessageID, "–≠—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –±—ã–ª–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ!", &keyboardOrder)
				}
			case "dp3":
				cart := GetUserCart(update.CallbackQuery.From.ID)
				if cart == nil {
					_, _ = bot.sendEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.Id, update.CallbackQuery.Message.MessageID, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", &keyboardOrder)
				} else {
					if CartContains(update.CallbackQuery.From.ID, 2) {
						RemoveFromUserCart(update.CallbackQuery.From.ID, 2)
						_, _ = bot.sendEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.Id, update.CallbackQuery.Message.MessageID, "–£–¥–∞–ª–µ–Ω–æ.", &keyboardOrder)
						continue
					}
					_, _ = bot.sendEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.Id, update.CallbackQuery.Message.MessageID, "–≠—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –±—ã–ª–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ!", &keyboardOrder)
				}
			case "dp4":
				cart := GetUserCart(update.CallbackQuery.From.ID)
				if cart == nil {
					_, _ = bot.sendEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.Id, update.CallbackQuery.Message.MessageID, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", &keyboardOrder)
				} else {
					if CartContains(update.CallbackQuery.From.ID, 3) {
						RemoveFromUserCart(update.CallbackQuery.From.ID, 3)
						_, _ = bot.sendEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.Id, update.CallbackQuery.Message.MessageID, "–£–¥–∞–ª–µ–Ω–æ.", &keyboardOrder)
						continue
					}
					_, _ = bot.sendEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.Id, update.CallbackQuery.Message.MessageID, "–≠—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –±—ã–ª–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ!", &keyboardOrder)
				}
			case "clearHist":
				if GetUserOrderHistory(update.CallbackQuery.From.ID) == "" {
					_, _ = bot.sendEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.Id, update.CallbackQuery.Message.MessageID, "–£–ø—Å! –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –∏ —Ç–∞–∫ –ø—É—Å—Ç–∞!", &keyboardMain)
				} else {
					ClearOrderHistory(update.CallbackQuery.From.ID)
					_, _ = bot.sendEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.Id, update.CallbackQuery.Message.MessageID, "–£–¥–∞–ª–µ–Ω–æ.", &keyboardMain)
				}
			case "dat3":
				address := GetUserAddress(update.CallbackQuery.From.ID)
				if address == "" {
					_, _ = bot.sendEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.Id, update.CallbackQuery.Message.MessageID, "–¢—ã –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª —Å–≤–æ–π –∞–¥—Ä–µ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω–æ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∏–∂–µ:", &keyboardAddress)
				} else {
					_, _ = bot.sendEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.Id, update.CallbackQuery.Message.MessageID, "–¢–≤–æ–π –∞–¥—Ä–µ—Å—Å: "+address, &keyboardAddress)
				}
			case "setAddress":
				_, _ = bot.sendMessage(update.CallbackQuery.Message.Chat.Id, "–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å:", nil)

				waitingInput = true
			case "dat4":
				if GetUserMark(update.CallbackQuery.From.ID) == 0 {
					_, _ = bot.sendEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.Id, update.CallbackQuery.Message.MessageID, "–û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞:", &keyboardRate)
				} else {
					mark := GetUserMark(update.CallbackQuery.From.ID)
					markstr := ""
					if mark == 1 {
						markstr = "üëç"
					} else {
						markstr = "üëé"
					}
					_, _ = bot.sendEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.Id, update.CallbackQuery.Message.MessageID, "–¢—ã —É–∂–µ –æ—Ü–µ–Ω–∏–≤–∞–ª –Ω–∞—à —Å–µ—Ä–≤–∏—Å –∫–∞–∫ "+markstr+". –•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É?", &keyboardRate)
				}

			case "good":
				_, _ = bot.sendEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.Id, update.CallbackQuery.Message.MessageID, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!", &keyboardMain)
				UpdateUserMark(update.CallbackQuery.From.ID, 1)
			case "bad":
				_, _ = bot.sendEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.Id, update.CallbackQuery.Message.MessageID, "–ú—ã –±—É–¥–µ–º —Å—Ç–∞—Ä–∞—Ç—å—Å—è –ª—É—á—à–µ, —Å–ø–∞—Å–∏–±–æ!", &keyboardMain)
				UpdateUserMark(update.CallbackQuery.From.ID, -1)
			case "toMain":
				_, _ = bot.sendEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.Id, update.CallbackQuery.Message.MessageID, "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:", &keyboardMain)
			case "toMainOrder":
				_, _ = bot.sendEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.Id, update.CallbackQuery.Message.MessageID, "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã –∑–∞–∫–∞–∂–µ—à—å:", &keyboardOrder)
			case "p1":
				//adding food
				AddToUserCart(update.CallbackQuery.From.ID, PizzaPepperony)
				_, _ = bot.sendEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.Id, update.CallbackQuery.Message.MessageID, "–î–æ–±–∞–≤–ª–µ–Ω–æ! –ß—Ç–æ-—Ç–æ –µ—â–µ?", &keyboardOrder)
			case "p2":
				AddToUserCart(update.CallbackQuery.From.ID, PizzaFourCheese)
				_, _ = bot.sendEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.Id, update.CallbackQuery.Message.MessageID, "–î–æ–±–∞–≤–ª–µ–Ω–æ! –ß—Ç–æ-—Ç–æ –µ—â–µ?", &keyboardOrder)
			case "p3":
				AddToUserCart(update.CallbackQuery.From.ID, Cola)
				_, _ = bot.sendEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.Id, update.CallbackQuery.Message.MessageID, "–î–æ–±–∞–≤–ª–µ–Ω–æ! –ß—Ç–æ-—Ç–æ –µ—â–µ?", &keyboardOrder)
			case "p4":
				AddToUserCart(update.CallbackQuery.From.ID, KinderSurprise)
				_, _ = bot.sendEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.Id, update.CallbackQuery.Message.MessageID, "–î–æ–±–∞–≤–ª–µ–Ω–æ! –ß—Ç–æ-—Ç–æ –µ—â–µ?", &keyboardOrder)
			case "p5":
				if GetUserAddress(update.CallbackQuery.From.ID) == "" {
					_, _ = bot.sendEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.Id, update.CallbackQuery.Message.MessageID, "–£–ø—Å! –ö–∞–∂–µ—Ç—Å—è —Ç—ã –∑–∞–±—ã–ª —É–∫–∞–∑–∞—Ç—å –Ω–∞–º —Å–≤–æ–π –∞–¥—Ä–µ—Å! –¢—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:", &keyboardMain)
					continue
				}
				items := GetUserCart(update.CallbackQuery.From.ID)
				if items == nil {
					_, _ = bot.sendEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.Id, update.CallbackQuery.Message.MessageID, "–£–ø—Å! –¢–≤–æ—è –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –í—ã–±–µ—Ä–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å:", &keyboardOrder)
					continue
				}
				str := ""
				foodmap := make(map[int]int)
				foodmap[0] = 0
				foodmap[1] = 0
				foodmap[2] = 0
				foodmap[3] = 0
				for i := 0; i <= 4; i++ {
					for _, v := range items {
						if v == i {
							foodmap[i] += 1
						}
					}
				}
				count := 0
				for i := 0; i <= 4; i++ {
					if foodmap[i] != 0 {
						str += strconv.Itoa(count+1) + ") " + FoodArray[i] + " - x" + strconv.Itoa(foodmap[i]) + "\n"
						count += 1
					}
				}
				AddToUserOrderHistory(update.CallbackQuery.From.ID)
				_, _ = bot.sendEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.Id, update.CallbackQuery.Message.MessageID, "–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ú—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –≥–æ—Ç–æ–≤–∏—Ç—å –µ–≥–æ:\n\n"+str, &keyboardMain)

			default:
			}
			_, _ = bot.sendAnswerCallbackQuery(update.CallbackQuery.ID)
			continue
		}
		if update.Message.CheckIfCommand() {
			waitingInput = false
			switch update.Message.Text {
			case "/start":
				_, err = bot.sendMessage(update.Message.Chat.Id, "–ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –¥–ª—è –Ω–∞—à–µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞, –∞ –º—ã –¥–æ—Å—Ç–∞–≤–∏–º —Ç–µ–±–µ –µ–≥–æ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞!\n–î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /my", nil)
				if err != nil {
					log.Println(err)
				}
				// Add user to DB when /start engaged
				CreateUser(strconv.FormatInt(update.Message.From.ID, 10))
			case "/my":
				_, _ = bot.sendDeleteMessage(update.Message.Chat.Id, GetLastMessageID(update.Message.From.ID))
				msg, errr := bot.sendMessage(update.Message.Chat.Id, "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:", &keyboardMain)
				SetLastMessageID(update.Message.From.ID, msg.MessageID)
				if errr != nil {
					log.Println(err)
				}
			case "/help":
				_, err = bot.sendMessage(update.Message.Chat.Id, "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –ú–µ–Ω—é —Å–ª–µ–≤–∞ —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–æ–º–∞–Ω–¥—É.\n–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º @Corsider", nil)
				if err != nil {
					log.Println(err)
				}
			default:
				_, err = bot.sendMessage(update.Message.Chat.Id, "–ù–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã!", nil)
				if err != nil {
					log.Println(err)
				}
			}
		} else {
			if !waitingInput {
				_, err = bot.sendMessage(update.Message.Chat.Id, "–ù–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã!", nil)
				if err != nil {
					log.Println(err)
				}
			} else {
				address := update.Message.Text
				t := "–û–∫, –≤–æ—Ç —Ç–≤–æ–π –∞–¥—Ä–µ—Å: " + address
				_, err = bot.sendMessage(update.Message.Chat.Id, t, &keyboardMain)
				SetUserAddress(update.Message.From.ID, address)
				if err != nil {
					log.Println(err)
				}
				waitingInput = false
			}
		}
	}
}
